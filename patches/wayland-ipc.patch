--- a/Makefile
+++ b/Makefile
@@ -55,6 +55,18 @@ idle-protocol.c:
 
 idle-protocol.o: idle-protocol.h
 
+net-tapesoftware-dwl-wm-protocol.h:
+	$(WAYLAND_SCANNER) server-header \
+		protocols/net-tapesoftware-dwl-wm.xml $@
+
+net-tapesoftware-dwl-wm-protocol.c:
+	$(WAYLAND_SCANNER) private-code \
+		protocols/net-tapesoftware-dwl-wm.xml $@
+
+net-tapesoftware-dwl-wm-protocol.o: net-tapesoftware-dwl-wm-protocol.h
+dwl.o: net-tapesoftware-dwl-wm-protocol.h
+dwl: net-tapesoftware-dwl-wm-protocol.o
+
 config.h: | config.def.h
 	cp config.def.h $@
 
--- a/dwl.c
+++ b/dwl.c
@@ -46,6 +46,7 @@
 #include <wlr/backend/libinput.h>
 #include <wlr/util/log.h>
 #include <xkbcommon/xkbcommon.h>
+#include "net-tapesoftware-dwl-wm-protocol.h"
 #ifdef XWAYLAND
 #include <X11/Xlib.h>
 #include <wlr/xwayland.h>
@@ -304,6 +305,9 @@ static struct wlr_surface *xytolayersurf
 static Monitor *xytomon(double x, double y);
 static void zoom(const Arg *arg);
 
+static void dwl_wm_bind(struct wl_client *client, void *data,
+        uint32_t version, uint32_t id);
+
 /* variables */
 static const char broken[] = "broken";
 static struct wl_display *dpy;
@@ -2125,6 +2129,7 @@ setup(void)
 	wl_signal_add(&output_mgr->events.test, &output_mgr_test);
 
 	presentation = wlr_presentation_create(dpy, backend);
+    wl_global_create(dpy, &znet_tapesoftware_dwl_wm_interface, 1, NULL, dwl_wm_bind);
 
 #ifdef XWAYLAND
 	/*
@@ -2622,3 +2627,27 @@ main(int argc, char *argv[])
 usage:
 	BARF("Usage: %s [-s startup command]", argv[0]);
 }
+
+static void dwl_wm_handle_release(struct wl_client *client, struct wl_resource *resource)
+{
+    wl_resource_destroy(resource);
+}
+static void dwl_wm_handle_destroy(struct wl_resource *resource)
+{
+}
+static const struct znet_tapesoftware_dwl_wm_interface dwl_wm_implementation = {
+    .release = dwl_wm_handle_release,
+};
+
+static void dwl_wm_bind(struct wl_client *client, void *data,
+        uint32_t version, uint32_t id)
+{
+	struct wl_resource *resource = wl_resource_create(client,
+		&znet_tapesoftware_dwl_wm_interface, version, id);
+	if (!resource) {
+		wl_client_post_no_memory(client);
+		return;
+	}
+
+	wl_resource_set_implementation(resource, &dwl_wm_implementation, NULL, dwl_wm_handle_destroy);
+}
